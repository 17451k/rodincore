<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.rodinp.core">
<annotation>
      <appInfo>
         <meta.schema plugin="org.rodinp.core" id="fileElementVersions" name="%fileElementVersionsName"/>
      </appInfo>
      <documentation>
         &lt;p&gt;File element types can be associated with version numbers. The platform supports automatic conversions from older to newer versions.&lt;/p&gt;
&lt;p&gt;Derived files should not have versions. They should simply be recreated after a clean of the builder.&lt;/p&gt;
      </documentation>
   </annotation>

   <element name="extension">
      <complexType>
         <sequence minOccurs="1" maxOccurs="unbounded">
            <element ref="fileElementVersion"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  a fully qualified identifier of the target extension point
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  an optional identifier of the extension instance
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  an optional name of the extension instance
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="fileElementVersion">
      <annotation>
         <documentation>
            Description of a file element version:
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  the fully qualified identifier of a type of file elements to which this version applies
               </documentation>
            </annotation>
         </attribute>
         <attribute name="version" type="string" use="required">
            <annotation>
               <documentation>
                  the version number, a number greater than or equal to 0 (&quot;zero&quot;)
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         0.7.6
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         For extension examples, please refer to the &quot;org.eventb.core&quot; plug-in.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         &lt;p&gt;Version management is almost completely hidden inside the Rodin core plug-in. Conversions, i.e. transformations between versions are declared exlusively in extensions. There is no need to implement any line of code in Java.&lt;/p&gt;
&lt;p&gt;Conversions can be carried out per project using method
&lt;pre&gt;
	IConversionResult RodinCore.convert(IRodinProject project, boolean force, IProgressMonitor monitor)
&lt;/pre&gt;
The parameter &lt;code&gt;force&lt;/code&gt; is used to express whether synchrony with the file system is wanted or not. See &lt;code&gt;org.eclipse.core.resources.IFile&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;Method &lt;code&gt;RodinCore.convert()&lt;/code&gt; does not modify files. It converts all files in memory and produces an &lt;code&gt;IConversionResult&lt;/code&gt;. The conversion result can be queried to find out about the status of the conversion of an entire project. Only if the conversion result is accepted
&lt;pre&gt;
	void accept(boolean force, boolean keepHistory, IProgressMonitor monitor)
&lt;/pre&gt;
the files of the project a manipulated, i.e., the updated files are written to disk.
&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         None required.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2007 ETH Zurich.&lt;br&gt;
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
&lt;a href=&quot;http://www.eclipse.org/legal/epl-v10.html&quot;&gt;http://www.eclipse.org/legal/epl-v10.html&lt;/a&gt;
      </documentation>
   </annotation>

</schema>
