package org.eventb.internal.core.seqprover.eventbExtensions;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import org.eventb.core.ast.Predicate;
import org.eventb.core.seqprover.IProverSequent;
import org.eventb.core.seqprover.ProverFactory;
import org.eventb.core.seqprover.ProverRule;
import org.eventb.core.seqprover.SequentProver;
import org.eventb.core.seqprover.IProofRule.IAntecedent;
import org.eventb.core.seqprover.eventbExtensions.Lib;
import org.eventb.core.seqprover.reasonerInputs.HypothesisReasoner;

/**
 * Generates a proof rule for modus tollens for a given implicative hypothesis.
 * 
 * <p>
 * Proof rules generated by this reasoner are not goal dependent.
 * </p>
 * 
 * <p>
 * Implementation is similar to the one in {@link ImpE}.
 * </p>
 * 
 * @author Farhad Mehta
 *
 */
// TODO : Rename to impEcontrapositive to be uniform with impE
public class ModusTollens extends HypothesisReasoner {

	public static String REASONER_ID = SequentProver.PLUGIN_ID + ".mt";

	public String getReasonerID() {
		return REASONER_ID;
	}

	@ProverRule("HM")
	@Override
	protected IAntecedent[] getAntecedents(IProverSequent sequent,
			Predicate pred) throws IllegalArgumentException {

		if (pred == null) {
			throw new IllegalArgumentException("Null hypothesis");
		}
		if (!Lib.isImp(pred)) {
			throw new IllegalArgumentException(
					"Hypothesis is not an implication: " + pred);
		}

		final Predicate notImpRight = Lib.makeNeg(Lib.impRight(pred));
		final Predicate notImpLeft = Lib.makeNeg(Lib.impLeft(pred));
		
		final Set<Predicate> addedHyps = Lib.breakPossibleConjunct(notImpLeft);
		Set<Predicate> deselectedHyps = new HashSet<Predicate>();
		deselectedHyps.add(pred);
		return new IAntecedent[] {
				ProverFactory.makeAntecedent(
						notImpRight,null,
						ProverFactory.makeDeselectHypAction(Arrays.asList(pred))),
				ProverFactory.makeAntecedent(
						null,
						addedHyps,
						ProverFactory.makeDeselectHypAction(deselectedHyps))
		};

	}

	@Override
	protected String getDisplay(Predicate pred) {
		return "â‡’ hyp mt (" + pred + ")";
	}
	
	@Override
	protected boolean isGoalDependent(IProverSequent sequent, Predicate pred) {
		return false;
	}

}
