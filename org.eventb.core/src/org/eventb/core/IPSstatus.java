/*******************************************************************************
 * Copyright (c) 2005 ETH Zurich.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/

package org.eventb.core;


import org.eclipse.core.runtime.IProgressMonitor;
import org.rodinp.core.IInternalElement;
import org.rodinp.core.IInternalElementType;
import org.rodinp.core.RodinCore;
import org.rodinp.core.RodinDBException;

/**
 * Common protocol for proof obligation status in Event-B Proof status (PS) files.
 * <p>
 * This interface is not intended to be implemented by clients.
 * </p>
 * 
 * @author Farhad Mehta
 *
 */
public interface IPSstatus extends IInternalElement {
	
	IInternalElementType ELEMENT_TYPE =
		RodinCore.getInternalElementType(EventBPlugin.PLUGIN_ID + ".status"); //$NON-NLS-1$

	/**
	 * Returns the name of this proof obligation in the RODIN database.
	 * 
	 * @return the name of this proof obligation.
	 * 
	 */
	// String getElementName();
	
	/**
	 * Returns the proof tree associated to this proof obligation from the
	 * RODIN database.
	 * 
	 * @return the proof tree associated to this proof obligation from the
	 * RODIN database, or <code>null</code> if no proof tree is associated to
	 * this proof obligation.
	 * 
	 * @throws RodinDBException
	 */
	IPRProofTree getProofTree() throws RodinDBException;
	
	/**
	 * Returns the IPOSequent associated to this proof obligation from the
	 * RODIN database.
	 * 
	 * @return the IPOSequent associated to this proof obligation from the
	 * RODIN database, or <code>null</code> if none is associated to
	 * this proof obligation (error).
	 * 
	 * @throws RodinDBException
	 */
	IPOSequent getPOSequent() throws RodinDBException;
	
	/**
	 * Returns <code>true</code> iff the associated proof tree is able to 
	 * discharge the associated proof obligation.
	 * @param monitor TODO
	 * 
	 * @return <code>true</code> iff the associated proof tree is able to 
	 * discharge the associated proof obligation.
	 * 
	 * @throws RodinDBException
	 */
	boolean isProofValid(IProgressMonitor monitor) throws RodinDBException;
	
	/**
	 * Returns the confidence of the associated proof tree.
	 * @param monitor TODO
	 * 
	 * @return the confidence of the associated proof tree 
	 * 			(see {@link org.eventb.core.seqprover.IConfidence})
	 * @throws RodinDBException 
	 */
	int getProofConfidence(IProgressMonitor monitor) throws RodinDBException;
	
	/**
	 * Returns <code>true</code> iff the automatic prover was attempted on
	 * the proof obligation
	 * @param monitor TODO
	 * 
	 * @return <code>true</code> iff the automatic prover was attempted on 
	 * 			the proof obligation
	 * 
	 * @throws RodinDBException
	 */
	boolean autoProverAttempted(IProgressMonitor monitor) throws RodinDBException;
	
	/**
	 * Returns <code>true</code> iff the current proof was generated by the automatic
	 * prover.
	 * @param monitor TODO
	 * 
	 * @return <code>true</code> iff the current proof was generated by the automatic
	 * prover.
	 * 
	 * @throws RodinDBException
	 */
	boolean isAutoProven(IProgressMonitor monitor) throws RodinDBException;
	
	// lock po & pr files before calling this method
	// void updateStatus(IProgressMonitor monitor) throws RodinDBException;
	
}
