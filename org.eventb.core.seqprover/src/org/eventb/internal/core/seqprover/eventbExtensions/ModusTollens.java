/*******************************************************************************
 * Copyright (c) 2005, 2009 ETH Zurich and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     ETH Zurich - initial API and implementation
 *     Systerel - corrected: hid original hyp, added notImpRight hyp (V0)
 *     Systerel - visibility: deselected notImpRight hyp (V1)
 *     Systerel - back to original rule, but hiding the original predicate (V2)
 *******************************************************************************/
package org.eventb.internal.core.seqprover.eventbExtensions;

import static java.util.Collections.singleton;
import static org.eventb.core.seqprover.ProverFactory.makeAntecedent;
import static org.eventb.core.seqprover.ProverFactory.makeHideHypAction;

import java.util.Set;

import org.eventb.core.ast.Predicate;
import org.eventb.core.seqprover.IHypAction;
import org.eventb.core.seqprover.IProverSequent;
import org.eventb.core.seqprover.IVersionedReasoner;
import org.eventb.core.seqprover.ProverRule;
import org.eventb.core.seqprover.SequentProver;
import org.eventb.core.seqprover.IProofRule.IAntecedent;
import org.eventb.core.seqprover.eventbExtensions.Lib;
import org.eventb.core.seqprover.reasonerInputs.HypothesisReasoner;

/**
 * Generates a proof rule for modus tollens for a given implicative hypothesis.
 * <p>
 * Proof rules generated by this reasoner are not goal dependent.
 * </p>
 * <p>
 * Implementation is similar to the one in {@link ImpE}.
 * </p>
 * 
 * @author Farhad Mehta
 */
public class ModusTollens extends HypothesisReasoner implements IVersionedReasoner {

	public static String REASONER_ID = SequentProver.PLUGIN_ID + ".mt";
	private static final int VERSION = 2;

	public String getReasonerID() {
		return REASONER_ID;
	}

	@ProverRule("HM")
	@Override
	protected IAntecedent[] getAntecedents(IProverSequent sequent,
			Predicate pred) {

		if (pred == null) {
			throw new IllegalArgumentException("Null hypothesis");
		}
		if (!Lib.isImp(pred)) {
			throw new IllegalArgumentException(
					"Hypothesis is not an implication: " + pred);
		}

		final Predicate notImpRight = Lib.makeNeg(Lib.impRight(pred));
		final Predicate notImpLeft = Lib.makeNeg(Lib.impLeft(pred));
		final Set<Predicate> addedHyps = Lib.breakPossibleConjunct(notImpLeft);
		final IHypAction hideHypAction = makeHideHypAction(singleton(pred));

		return new IAntecedent[] {
				makeAntecedent(notImpRight, null, hideHypAction),
				makeAntecedent(null, addedHyps, hideHypAction) };
	}

	@Override
	protected String getDisplay(Predicate pred) {
		return "â‡’ hyp mt (" + pred + ")";
	}
	
	@Override
	protected boolean isGoalDependent(IProverSequent sequent, Predicate pred) {
		return false;
	}

	public int getVersion() {
		return VERSION;
	}

}
