<project name="org.eventb.core.ast" default="generate" basedir=".">
	<description>
        Generates derived files in the Event-B AST library.
	</description>

	<!-- Global properties for this build -->
	<property name="src" location="src" />

	<property name="tools" location="tools" />
	<property name="javadoc" location="javadoc" />
	<property name="coco.home" location="${tools}/Coco-R" />
	<property name="jflex.home" location="${tools}/jflex" />
	
	<property name="lexer.src" location="${src}/org/eventb/internal/core/parser" />
	<taskdef name="jflex"
		classname="JFlex.anttask.JFlexTask"
		classpath="${jflex.home}/lib/JFlex.jar"
	/>

	<property name="parser.pkg" value="org.eventb.internal.core.parser" />
	<property name="parser.src" location="${src}/org/eventb/internal/core/parser" />

	<property name="unifier.src" location="${src}/org/eventb/internal/core/typecheck" />

	<property name="org.eventb.core.ast.home" location="." />
	<import file="${org.eventb.core.ast.home}/tom/tom-task.xml"/>

	<target name="init" description="Create the initial time stamp">
		<tstamp />
	</target>

	<target name="generate" depends="lexer,parser,unifier"
			description="Generate all Java files">
	</target>

	<target name="lexer" depends="init"
		description="Generate the lexer">
		<jflex destdir="${src}"
			file="${lexer.src}/bmath.lex"
			skeleton="${lexer.src}/jflex.skeleton"
		/>
	</target>

	<target name="parser.test" depends="init"
			description="Test if the generated parser is up to date">
		<uptodate property="parser.notRequired" 
				targetfile="${parser.src}/Parser.java" >
		    <srcfiles file= "${parser.src}/bmath.atg" />
		    <srcfiles file= "${parser.src}/Parser.frame" />
		</uptodate>
	</target>

	<target name="parser" 
			depends="init,parser.test"
			description="Generate the parser"
			unless="parser.notRequired">
		<java jar="${coco.home}/Coco.jar" fork="true" dir="${parser.src}">
			<arg line="-package ${parser.pkg}" />
			<arg file="${parser.src}/bmath.atg" />
		</java>
	</target>

	<target name="unifier" depends="init"
			description="Generate the type unifier using Tom">
		<tom config="${tom.home}/Tom.xml"
				srcdir="${src}"
				destdir="${src}"
				options="-I ${org.eventb.core.ast.home}/tom"
				pretty="true"
				optimize="true">
			<include name="**/*.t" />
		</tom>
	</target>

	<target name="coco.regen" 
		depends="coco.compile"
		description="Regenerate the Coco/R source files from its grammar (bootstrap it)">
		<java jar="${coco.home}/Coco.jar" fork="true">
			<arg line="-package Coco" />
			<arg file="${coco.home}/Coco.atg" />
		</java>
		<move file="${coco.home}/Parser.java" todir="${coco.home}/Coco" />
		<move file="${coco.home}/Scanner.java" todir="${coco.home}/Coco" />
	</target>

	<target name="coco.compile" depends="init"
		description="Compile the Coco/R Parser Generator">
		<javac srcdir="${coco.home}" />
		<jar 
			destfile="${coco.home}/Coco.jar" 
			basedir="${coco.home}"
			includes="Coco/*.class"
			manifest="${coco.home}/Coco.manifest"
		/>
	</target>

	<target name="jflex.compile" depends="init"
			description="Compile the JFlex Scanner Generator">
		<ant antfile="${jflex.home}/src/build.xml"
			dir="${jflex.home}/src"
			target="jar"
			inheritAll="false"
		/>
	</target>

	<target name="clean"
			description="Clean up generated files">
		<delete dir="${javadoc}" />
		<delete file="${lexer.src}/Lexer.java" />
		<delete file="${parser.src}/Parser.java" />
		<delete file="${parser.src}/Parser.java.old" />
		<delete file="${unifier.src}/TypeUnifier.java" />
	</target>
	
	<target name="javadoc" description="Generates the javadoc of the published API">
		<javadoc 
			access="public" 
			author="true" 
			classpath="." 
			destdir="javadoc" 
			doctitle="The event-B AST library" 
			nodeprecated="false" 
			nodeprecatedlist="false" 
			noindex="false" 
			nonavbar="false" 
			notree="false" 
			packagenames="org.eventb.core.ast" 
			source="1.5" 
			sourcepath="src" 
			splitindex="true" 
			use="true" 
			version="true"/>
	</target>

</project>