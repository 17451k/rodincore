/*******************************************************************************
 * Copyright (c) 2006 ETH Zurich.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

import org.eventb.core.ast.BoundIdentDecl;
import org.eventb.core.ast.Expression;
import org.eventb.core.ast.Formula;
import org.eventb.core.ast.FormulaFactory;
import org.eventb.core.ast.FreeIdentifier;
import org.eventb.core.ast.Predicate;
import org.eventb.core.ast.Type;
import org.eventb.rubin.Sequent;

COMPILER Rubin

	private static final FormulaFactory ff = FormulaFactory.getDefault();
	
	private static final Type UType = ff.makeGivenType("UNIVERSE");
	
	private static final Predicate dummy = 
		ff.makeLiteralPredicate(Formula.BFALSE, null);

	private final ArrayList<Sequent> sequents = new ArrayList<Sequent>();
	
	public final Sequent[] getResult() {
		if (errors.count != 0) {
			return null;
		}
		return sequents.toArray(new Sequent[sequents.size()]);
	}

	private String makeHeader(Token token) {
		final String quotedString = token.val;
		final int length = quotedString.length();
		return quotedString.substring(1, length - 1);
	}

	private Predicate makePredicate(Token token, List<Expression> args) {
		final int length = args.size();
		final FreeIdentifier predIdent =
			ff.makeFreeIdentifier(token.val, null, makeType(args));
		if (length == 0) {
			return ff.makeRelationalPredicate(Formula.EQUAL,
					predIdent,
					ff.makeAtomicExpression(Formula.TRUE, null),
					null);
		} else {
			final Expression lhs = makeMaplet(args);
			return ff.makeRelationalPredicate(Formula.IN,
					lhs,
					predIdent,
					null);
		}
	}

	private Predicate makeNot(Predicate pred) {
		return ff.makeUnaryPredicate(Formula.NOT,
		pred, null);
	}

	private Type makeType(List<Expression> args) {
		if (args.size() == 0) {
			return ff.makeBooleanType();
		}
		Type result = args.get(0).getType();
		final int length = args.size();
		for (int i = 1; i < length; i++) {
			result = ff.makeProductType(result, args.get(i).getType());
		}
		return ff.makePowerSetType(result);
	}

	private Expression makeMaplet(List<Expression> args) {
		Expression result = args.get(0);
		final int length = args.size();
		for (int i = 1; i < length; i++) {
			result = ff.makeBinaryExpression(Formula.MAPSTO,
					result,
					args.get(i),
					null);
		}
		return result;
	}

	private final Stack<String> boundIdentifiers = new Stack<String>();

	private void pushDecl(String name) {
		boundIdentifiers.push(name);
	}
	
	private void popDecl() {
		boundIdentifiers.pop();
	}
	
	private Expression makeIdentifier(Token token) {
		final String name = token.val;
		final int index = boundIdentifiers.indexOf(name);
		if (index == -1) {
			return ff.makeFreeIdentifier(name, null, UType);
		}
		final int boundIndex = boundIdentifiers.size() - index - 1;
		return ff.makeBoundIdentifier(boundIndex, null, UType);
	}

CHARACTERS
	upperCase = 'A' .. 'Z'.
	lowerCase = 'a' .. 'z'.
	digit = '0' .. '9'.
	eol = "\r\n".
	anyButQuote = ANY - '"'.

TOKENS
	forall = '!'.
	exists = '#'.
	not = '~'.
	and = '&'.
	or = '|'.
	implies = "->".
	equivalent = "<->".
	turnstile = "|-".
	colon = ':'.
	comma = ','.
	semicolon = ';'.
	lpar = '('.
	rpar = ')'.
	equals = '='.
	notequals = "/=".
	name = '"' {anyButQuote} '"'.
	predLetter = upperCase.
	termLetter = lowerCase.

COMMENTS FROM "/*" TO "*/"
COMMENTS FROM "//" TO '\n'

IGNORE '\t' + '\r' + '\n' + '\f'

PRODUCTIONS

	Rubin =							(. Sequent s; .)
		Sequent<out s>				(. sequents.add(s); .)
		{
			WEAK
			semicolon
			Sequent<out s>				(. sequents.add(s); .)
		}
	.
		
	Sequent<out Sequent s> =		(. String name = "";
									   Predicate[] hyps = new Predicate[0]; .)
		[
			SequentHeader<out name>
		]
		[
			PredicateList<out hyps>
		]
		turnstile
		Predicate<out Predicate goal>
									(. s = new Sequent(name, hyps, goal); .)
	.

	SequentHeader<out String name> =
		name						(. name = makeHeader(t); .)
		colon
	.

	PredicateList<out Predicate[] a> =
									(. List<Predicate> l =
											new ArrayList<Predicate>(); .)
		Predicate<out Predicate p>	(. l.add(p); .)
		{
			WEAK
			comma
			Predicate<out p>		(. l.add(p); .)
		}							(. a = l.toArray(new Predicate[l.size()]); .)
	.

	Predicate<out Predicate p> =
		Predicate1<out p>
		[							(. int kind; Predicate q; .)
			(
				implies				(. kind = Formula.LIMP; .)
			|
				equivalent			(. kind = Formula.LEQV; .)
			)
			Predicate1<out q>		(. p = ff.makeBinaryPredicate(kind,
											p, q, null); .)
		]
	.

	Predicate1<out Predicate p> =
		Predicate2<out p>
		[							(. List<Predicate> children =
											new ArrayList<Predicate>();
									   children.add(p); .)
			and
			Predicate2<out p>		(. children.add(p); .)
			{
				and
				Predicate2<out p>	(. children.add(p); .)
			}
									(. p = ff.makeAssociativePredicate(
											Formula.LAND, children, null); .)
		|							(. List<Predicate> children =
											new ArrayList<Predicate>();
									   children.add(p); .)
			or
			Predicate2<out p>		(. children.add(p); .)
			{
				or
				Predicate2<out p>	(. children.add(p); .)
			}
									(. p = ff.makeAssociativePredicate(
											Formula.LOR, children, null); .)
		]
	.
	
	Predicate2<out Predicate p>		(. p = dummy; .)
	=
		not
		Predicate2<out p>			(. p = makeNot(p); .)
	|
		Predicate3<out p>
	.
	
	Predicate3<out Predicate p>		(. p = dummy; .)
	=								(. int kind;
									   BoundIdentDecl decl; .)
		(		
			forall					(. kind = Formula.FORALL; .)
			VarDecl<out decl>
		|
			exists					(. kind = Formula.EXISTS; .)
			VarDecl<out decl>
		)
		Predicate2<out Predicate inner>
									(. popDecl();
									   p = ff.makeQuantifiedPredicate(kind,
											new BoundIdentDecl[] {decl},
											inner,
											null); .)
	|
		Primary<out p>
	.
	
	VarDecl<out BoundIdentDecl d> =
		termLetter					(. pushDecl(t.val);
									   d = ff.makeBoundIdentDecl(
									   		t.val, null, UType); .)
	.
	
	Primary<out Predicate p>		(. p = dummy; .)
	=								(. List<Expression> args =
											new ArrayList<Expression>(); .)
		predLetter					(. Token tok = t; .)
		{
			Term<out Expression e>	(. args.add(e); .)
		}
									(. p = makePredicate(tok, args); .)
	|	lpar
		Predicate<out p>
		rpar
	|	Term<out Expression left>	(. boolean negated = false; .)
		(	equals
		|	notequals				(. negated = true; .)
		)
		Term<out Expression right>	(. p = ff.makeRelationalPredicate(
											Formula.EQUAL, left, right, null);
									   if (negated) {
									   		p = makeNot(p);
									   } .)
	.
	
	Term<out Expression e> =
		termLetter					(. e = makeIdentifier(t); .)
	.

END Rubin.