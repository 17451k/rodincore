/*******************************************************************************
 * Copyright (c) 2005 ETH Zurich.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/

/*
 *  This file contains the Tom declarations for the Type class hierarchy,
 *  so that clients can use Tom pattern matching on types.
 */

%typeterm Type {
	implement { Type }
	equals(t1,t2) { t1.equals(t2) }
}

%typeterm TypeList {
	implement { Type[] }
	equals(t1,t2) { t1.equals(t2) }  /* Check if appropriate. */
}

%oparray TypeList tList (Type*) {
	is_fsym(t) { true }
    get_size(t)      { t.length }
    get_element(t,n) { t[n-1] }
	make_empty(t) { null }
	make_append(e, t) { null }
}

/* Type constructors: power set, cartesian product and parametric type. */

%op Type PowSet (child : Type) {
	is_fsym(t) { t instanceof PowerSetType }
	get_slot(child,t) { ((PowerSetType) t).getBaseType() }
}

%op Type CProd (left: Type, right: Type) {
	is_fsym(t) { t instanceof ProductType }
	get_slot(left,t) { ((ProductType) t).getLeft() }
	get_slot(right,t) { ((ProductType) t).getRight() }
}

%op Type ParamType (children : TypeList) {
	is_fsym(t) { t instanceof ParametricType }
	get_slot(children,t) { ((ParametricType) t).getTypeParameters() }
}

/* Atomic types: carrier set, integer and boolean. */

%op Type Set (name: String) {
	is_fsym(t) { t instanceof GivenType }
	get_slot(name,t) { ((GivenType) t).getName() }
}

%op Type Int {
	is_fsym(t) { t instanceof IntegerType }
}

%op Type Bool {
	is_fsym(t) { t instanceof BooleanType }
}
