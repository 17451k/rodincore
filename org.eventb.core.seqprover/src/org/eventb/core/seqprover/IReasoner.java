/*******************************************************************************
 * Copyright (c) 2006, 2012 ETH Zurich and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     ETH Zurich - initial API and implementation
 *******************************************************************************/
package org.eventb.core.seqprover;

/**
 * Common protocol for reasoners.
 * <p>
 * Reasoners build the bacic block of proof trees: proof rules. Given a sequent
 * and a (reasoner defined) input, a reasoner returns a proof rule, that is a
 * list of new sequents to insert as children in the proof tree, or a failure.
 * </p>
 * <p>
 * Reasoners also provide means for serializing and deserializing their input,
 * so that a proof can be saved to disk.
 * </p>
 * <p>
 * This interface is intended to be implemented by clients who contribute new
 * reasoners.
 * </p>
 * 
 * @author Farhad Mehta
 * @since 1.0
 */
public interface IReasoner {

	/**
	 * Returns the unique id of this reasoner, that is the value of the
	 * <code>id</code> field used when registering it to the extension point
	 * <code>org.eventb.core.seqprover.reasoners</code>.
	 * 
	 * @return the unique id of this reasoner
	 */
	String getReasonerID();

	/**
	 * Serializes the given input using the given writer.
	 * <p>
	 * Clients should store with the given writer all data of the input that can
	 * not be retrieved from the proof rule that was generated by the last
	 * successful application of this reasoner to a sequent.
	 * </p>
	 * 
	 * @param input
	 *            the input to serialize
	 * @param writer
	 *            the writer to use
	 * @throws SerializeException
	 *             In case of error when serializing.
	 */
	void serializeInput(IReasonerInput input, IReasonerInputWriter writer)
			throws SerializeException;

	/**
	 * Deserializes an input of this reasoner using the given reader.
	 * <p>
	 * Clients should retriever from the reader all data needed to reconstruct
	 * an input that was previously serialized. The reader provides means to
	 * access to data serialized explicitely, as well as to the proof rule that
	 * was generated from the serialized input.
	 * </p>
	 * 
	 * @param reader
	 *            the reader to use
	 * @return a new instance of the input that was previously serialized
	 * @throws SerializeException
	 *             In case of error when serializing.
	 */
	IReasonerInput deserializeInput(IReasonerInputReader reader)
			throws SerializeException;

	/**
	 * Apply this reasoner to the given sequent with the given input.
	 * 
	 * @param seq
	 *            the sequent to which this reasoner is applied
	 * @param input
	 *            the input to this reasoner
	 * @param pm
	 *            a proof monitor (provides cancellation)
	 * @return the result of applying this reasoner to the given sequent (either
	 *         a proof rule or a failure)
	 * @see IProofRule
	 * @see IReasonerFailure
	 */
	IReasonerOutput apply(IProverSequent seq, IReasonerInput input,
			IProofMonitor pm);

}
