<project name="Build specific targets and properties" default="noDefault">

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<available property="allElementsFile" file="${builder}/allElements.xml" value="${builder}/allElements.xml" />
	<property name="allElementsFile" location="${eclipse.pdebuild.templates}/headless-build/allElements.xml" />

	<import file="${allElementsFile}" />
	<target name="allElements">
		<antcall target="allElementsDelegator" />
	</target>
	
	<!-- ===================================================================== -->
	<!-- ===================================================================== -->
	<target name="getBaseComponents" depends="checkLocalBase" unless="skipBase">
		<get src="${eclipseBaseURL}" dest="${buildDirectory}/../temp-base.zip" />
		<unzip dest="${base}" overwrite="true" src="${buildDirectory}/../temp-base.zip" />
	</target>

	<target name="checkLocalBase">
		<available file="${base}" property="skipBase" />
	</target>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">
		<property name="mapsCheckoutTag" value="HEAD" />
		<cvs cvsRoot="${mapsRepo}" package="${mapsRoot}" dest="${buildDirectory}/maps" tag="${mapsCheckoutTag}" />
	</target>

	<target name="checkLocalMaps">
		<available property="skipMaps" file="${buildDirectory}/maps" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<cvs dest="${buildDirectory}/maps/${mapsRoot}" command="tag ${mapsTagTag}" />
	</target>

	<!-- ===================================================================== -->

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<target name="gatherLogs">
		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
		<unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features">
				<include name="**/*.log.zip" />
			</fileset>
		</unzip>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
		<antcall target="getBaseComponents" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running package. -->
	<!-- ===================================================================== -->
	<target name="postPackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<antcall target="gatherLogs" />

		<antcall target="run.director.for.macosx.x86"/>
		<antcall target="run.director.for.macosx.ppc"/>
		<antcall target="run.director.for.win32"/>
		<antcall target="run.director.for.linux"/>
	</target>
	
	<target name="run.director.for.macosx.pcc" depends="check.director.for.macosx"
			if="do.director.for.macosx">
		<antcall target="run.director.for">
			<param name="p2.os" value="macosx" />
			<param name="p2.ws" value="carbon" />
			<param name="p2.arch" value="ppc" />
		</antcall>
	</target>

	<target name="run.director.for.macosx.x86" depends="check.director.for.macosx"
			if="do.director.for.macosx">
		<antcall target="run.director.for">
			<param name="p2.os" value="macosx" />
			<param name="p2.ws" value="carbon" />
			<param name="p2.arch" value="x86" />
		</antcall>
	</target>
	
	<target name="check.director.for.macosx">
		<condition property="do.director.for.macosx">
			<contains string="${configs}" substring="macosx"/>
		</condition>
	</target>

	<target name="run.director.for.linux" depends="check.director.for.linux"
			if="do.director.for.linux">
		<antcall target="run.director.for">
			<param name="p2.os" value="linux" />
			<param name="p2.ws" value="gtk" />
			<param name="p2.arch" value="x86" />
		</antcall>
	</target>
	
	<target name="check.director.for.linux">
		<condition property="do.director.for.linux">
			<contains string="${configs}" substring="linux"/>
		</condition>
	</target>

	<target name="run.director.for.win32" depends="check.director.for.win32"
			if="do.director.for.win32">
		<antcall target="run.director.for">
			<param name="p2.os" value="win32" />
			<param name="p2.ws" value="win32" />
			<param name="p2.arch" value="x86" />
		</antcall>
	</target>
	
	<target name="check.director.for.win32">
		<condition property="do.director.for.win32">
			<contains string="${configs}" substring="win32"/>
		</condition>
	</target>

	<target name="run.director.for">
		<!--property file="${buildDirectory}/product.version"/-->
		<mkdir dir="${buildDirectory}/result/tmp" />
		<antcall target="run.director">
			<param name="p2.director.install.path" value="${buildDirectory}/result/tmp/${archivePrefix}" />
			<param name="p2.IU" value="org.rodinp.platform.product" />
			<!--param name="p2.version" value="${buildId}"/-->
		</antcall>

		<!-- Copy the p2 settings in destination -->
		<property name="p2.settings" location="${buildDirectory}/result/tmp/rodin/configuration/.settings" />
		<mkdir dir="${p2.settings}" />
		<copy todir="${p2.settings}">
			<fileset dir="${builder}/p2-settings" includes="**" />
		</copy>

                <!-- when building with cruisecontrol, we use Linux zip to preserve permissions -->
                <antcall target="zip.ant" />
                <antcall target="zip.linux"/>

		<delete dir="${buildDirectory}/result/tmp" />
	</target>

        <target name="zip.ant" unless="cruisecontrol">
		<zip destfile="${buildDirectory}/result/rodin-product-${p2.os}.${p2.ws}.${p2.arch}.zip" basedir="${buildDirectory}/result/tmp" />
	</target>

        <target name="zip.linux"  if="cruisecontrol" >
          <exec executable="zip" dir="${buildDirectory}/result/tmp">
            <arg value="-r"/>
            <arg value="${buildDirectory}/result/rodin-product-${p2.os}.${p2.ws}.${p2.arch}.zip"/>
            <arg value="rodin"/>
          </exec>

	</target>

	<target name="run.director">
		<exec executable="${baseLocation}/eclipse" failonerror="true" timeout="900000">
			<arg line="-application org.eclipse.equinox.p2.director.app.application" />
			<arg line="-nosplash" />
			<arg line="--launcher.suppressErrors" />
			<arg line="-consoleLog" />
			<arg line="-flavor ${p2.flavor}" />
			<arg line="-installIU ${p2.IU}" />
			<arg line="-version ${buildId}" />
			<arg line="-p2.os ${p2.os}" />
			<arg line="-p2.ws ${p2.ws}" />
			<arg line="-p2.arch ${p2.arch}" />
			<arg line="-roaming" />
			<arg line="-profile RodinProfile" />
			<arg line="-metadataRepository ${p2.metadata.repo}" />
			<arg line="-artifactRepository ${p2.artifact.repo}" />
			<arg line="-destination ${p2.director.install.path}" />
			<arg line="-bundlepool ${p2.director.install.path}" />
			<arg line="-profileProperties org.eclipse.update.install.features=true" />
			<arg line="-vmargs" />
			<arg line="-Declipse.p2.data.area=${p2.director.install.path}/p2" />
		</exec>
		<mkdir dir="${p2.director.install.path}/dropins" />

		<!-- delete the metadata cache as well as the artifacts for unzipped bundles -->
		<delete failonerror="false" includeEmptyDirs="true" dir="${p2.director.install.path}/p2/org.eclipse.equinox.p2.core/cache" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

</project>
